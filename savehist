;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(counsel-git-grep-history minibuffer-history buffer-name-history ivy-history counsel-M-x-history extended-command-history file-name-history))
(setq minibuffer-history '("/bin/zsh"))
(setq ivy-history '(#("readme md" 0 9 (ivy-index 0)) #("cui" 0 3 (ivy-index 0)) #("core" 0 4 (ivy-index 0)) #("noo" 0 3 (ivy-index 0)) #("dra" 0 3 (ivy-index 0)) #("clojure-mode" 0 12 (ivy-index 0)) #("fmanage.py" 0 10 (ivy-index 0)) #("fmanage/" 0 8 (ivy-index 0)) #("fma" 0 3 (ivy-index 0)) #("doom-" 0 5 (ivy-index 1))))
(setq counsel-M-x-history '(#("sh-mode" 0 7 (ivy-index 0)) #("customize theme" 0 15 (ivy-index 0)) #("whitespace clea" 0 15 (ivy-index 1)) #("whitespace" 0 10 (ivy-index 11)) #("grep" 0 4 (ivy-index 21)) #("^but" 0 4 (ivy-index 0)) #("^load" 0 5 (ivy-index 1)) #("shell" 0 5 (ivy-index 22)) #("term" 0 4 (ivy-index 0)) #("^load theme" 0 11 (ivy-index 0)) #("^try" 0 4 (ivy-index 0)) #("^package-re" 0 11 (ivy-index 1)) #("try " 0 4 (ivy-index 3)) #("customize-t" 0 11 (ivy-index 0)) #("^" 0 1 (ivy-index 0)) #("customize-theme" 0 15 (ivy-index 0))))
(setq extended-command-history '("rename-file"))
(setq file-name-history '(#("/home/firaaz/.aliases" 0 21 (ivy-index 3)) #("/home/firaaz/.zshrc" 0 19 (ivy-index 0)) #("/home/firaaz/.emacs.d/" 0 22 (ivy-index 0)) #("/home/firaaz/.emacs.d/init.el" 0 29 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/ivy.el" 0 35 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/base.el" 0 36 (ivy-index 0)) #("/home/firaaz/.emacs.d/.gitignore" 0 32 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/smartparens.el" 0 43 (ivy-index 13)) #("/home/firaaz/.emacs.d/config/" 0 29 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/latex.el" 0 37 (ivy-index 0)) #("/home/firaaz/projects/idoctor/flaskapp/app/frontend/data/en_Labels.js" 0 69 (ivy-index 0)) #("/home/firaaz/projects/idoctor/flaskapp/app/frontend/data/umls.js" 0 64 (ivy-index 0)) #("/home/firaaz/projects/idoctor/generateLabels.py" 0 47 (ivy-index 0)) #("/home/firaaz/projects/idoctor/data/" 0 35 (ivy-index 4)) #("/home/firaaz/projects/idoctor/" 0 30 (ivy-index 0)) #("/home/firaaz/Downloads/umls-2019AB-full/2019AB-full/README.txt" 0 62 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/haskell.el" 0 39 (ivy-index 0)) #("/home/firaaz/projects/codewars/python/alphabet_position.py" 0 58 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/completion.el" 0 42 (ivy-index 0)) #("/home/firaaz/.doom.d/config.el" 0 30 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/theme.el" 0 37 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/keybinds.el" 0 40 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/clojure.el" 0 39 (ivy-index 0)) #("/home/firaaz/projects/clojure/clj-boost-demo/src/clj_boost_demo/core.clj" 0 72 (ivy-index 0)) #("/home/firaaz/projects/fmanage/fmanage.py" 0 40 (ivy-index 1)) #("/home/firaaz/.emacs.d/config/dired.el" 0 37 (ivy-index 0)) #("/home/firaaz/projects/clojure/clojure-noob/src/clojure_noob/core.clj" 0 68 (ivy-index 0)) #("/home/firaaz/projects/fmanage/clojure.el" 0 40 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/python.el" 0 38 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/projectile.el" 0 42 (ivy-index 0)) #("/home/firaaz/.emacs.d/custom-variables.el" 0 41 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/lsp.el" 0 35 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/version-control.el" 0 47 (ivy-index 0)) "~/.emacs.d/config/ivy.el" "~/.emacs.d/config/ivy.ek"))
(setq kill-ring '(#("
" 0 1 (fontified t face font-lock-comment-face)) #("

" 0 1 (fontified t) 1 2 (fontified t)) #("
" 0 1 (fontified t)) #("  (setq ivy-initial-inputs-alist nil)" 0 3 (fontified t) 3 7 (face font-lock-keyword-face fontified t) 7 37 (fontified t)) #("  :init

  :config" 0 2 (fontified t) 2 7 (face font-lock-builtin-face fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 11 (fontified t) 11 18 (face font-lock-builtin-face fontified t)) #("  (setq ivy-initial-inputs-alist nil)" 0 3 (fontified t) 3 7 (fontified t face font-lock-keyword-face) 7 37 (fontified t)) #("(use-package try)" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 16 (fontified t face font-lock-constant-face) 16 17 (fontified t)) #("  :after (company auctex))
" 0 2 (fontified t) 2 8 (fontified t face font-lock-builtin-face) 8 26 (fontified t) 26 27 (fontified t)) #(";;; -*- lexical-binding: t -*-" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 30 (fontified t face font-lock-comment-face)) #(";;; -*- lexical-binding: t -*-" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 30 (face font-lock-comment-face fontified t)) #("
" 0 1 (fontified t)) #("(use-package )" 0 1 (fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 14 (fontified t)) #("
" 0 1 (fontified t)) #("; enable all commands" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 21 (face font-lock-comment-face fontified t)) #("(global-set-key (kbd \"C-x o\") 'ace-window)" 0 21 (fontified t) 21 28 (fontified t face font-lock-string-face) 28 42 (fontified t)) #("(reduce (fn [new-map key val]]
        ))" 0 8 (fontified t) 8 9 (fontified t) 9 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 28 (fontified t) 28 29 (fontified t) 29 31 (fontified t) 31 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t)) #("
" 0 1 (fontified t)) #("((()" 0 4 (fontified t)) #(";;; -*- lexical-binding: t -*-" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 30 (fontified t face font-lock-comment-face)) #("(defn -main
  []
  (let [split-set (->> iris-path
                       generate-iris" 0 1 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 1 2 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 2 3 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 3 4 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 4 5 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 5 6 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 6 7 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 7 8 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 8 9 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 9 10 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 10 11 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 11 12 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 12 17 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 17 20 (cider-locals ("result" "model" "test" "train" "split-set") fontified t) 20 21 (cider-locals ("result" "model" "test" "train" "split-set") fontified t face font-lock-keyword-face) 21 22 (cider-locals ("result" "model" "test" "train" "split-set") fontified t face font-lock-keyword-face) 22 23 (cider-locals ("result" "model" "test" "train" "split-set") fontified t face font-lock-keyword-face) 23 25 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 25 26 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 26 27 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 27 28 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 28 29 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 29 30 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 30 31 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 31 32 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 32 33 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 33 36 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 36 37 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t face font-lock-keyword-face) 37 38 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t face font-lock-keyword-face) 38 39 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t face font-lock-keyword-face) 39 40 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 40 48 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 48 50 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 50 73 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 73 85 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t) 85 86 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t rear-nonsticky t)) #("(defn -main
  []
  (let [split-set (->> iris-path
                       generate-iris" 0 1 (cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 1 2 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 2 3 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 3 4 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 4 5 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 5 6 (cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 6 7 (face font-lock-function-name-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 7 8 (face font-lock-function-name-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 8 9 (face font-lock-function-name-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 9 10 (face font-lock-function-name-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 10 11 (face font-lock-function-name-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 11 12 (cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 12 17 (cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 17 20 (cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 20 21 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 21 22 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 22 23 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set") fontified t help-echo cider--help-echo) 23 25 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 25 26 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 26 27 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 27 28 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 28 29 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 29 30 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 30 31 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 31 32 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 32 33 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 33 36 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 36 37 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 37 38 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 38 39 (face font-lock-keyword-face cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 39 40 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") fontified t help-echo cider--help-echo) 40 48 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") help-echo cider--help-echo fontified t) 48 50 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") help-echo cider--help-echo fontified t) 50 73 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") help-echo cider--help-echo fontified t) 73 85 (cider-locals ("result" "model" "test" "train" "split-set" "split-set") help-echo cider--help-echo fontified t) 85 86 (font-lock-multiline t cider-locals ("result" "model" "test" "train" "split-set" "split-set") help-echo cider--help-echo fontified t)) #(";; (defn demo-reader []
;;   (with-open [reader (io/reader iris-path)]
;;     (doall (csv/read-csv reader))))" 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t) 3 24 (face font-lock-comment-face cider-locals nil help-echo cider--help-echo fontified t) 24 29 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t) 29 39 (face font-lock-comment-face cider-locals nil help-echo cider--help-echo fontified t) 39 71 (face font-lock-comment-face cider-locals ("reader") help-echo cider--help-echo fontified t) 71 78 (face font-lock-comment-delimiter-face cider-locals ("reader") help-echo cider--help-echo fontified t) 78 84 (face font-lock-comment-face cider-locals ("reader") help-echo cider--help-echo fontified t) 84 107 (face font-lock-comment-face cider-locals ("reader") help-echo cider--help-echo fontified t) 107 109 (face font-lock-comment-face cider-locals ("reader") help-echo cider--help-echo fontified t)) #("lkajsdlksjadlkja" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (font-lock-multiline t fontified t)) #(";;; -*- lexical-binding: t -*-" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 30 (fontified t face font-lock-comment-face)) #("
" 0 1 (fontified t)) #("if __name__ == '__main__':" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 11 (face font-lock-builtin-face fontified t) 11 15 (fontified t) 15 16 (face font-lock-string-face syntax-table (15) fontified t) 16 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face syntax-table (15) fontified t) 25 26 (rear-nonsticky t fontified t)) #("if __name__ == '__main__':" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 11 (face font-lock-builtin-face fontified t) 11 15 (fontified t) 15 16 (face font-lock-string-face fontified t syntax-table (15)) 16 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face fontified t syntax-table (15)) 25 26 (fontified t)) "C-x C-o runs the command delete-blank-lines (found in global-map)," #(";;; -*- lexical-binding: t -*-" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 30 (fontified t face font-lock-comment-face)) #("window))" 0 8 (fontified t)) #("t -*-
" 0 6 (fontified t face font-lock-comment-face)) #("main()

" 0 7 (fontified t) 7 8 (fontified t)) #("os.mkdir()" 0 3 (fontified t) 3 10 (fontified t)) #("os.path" 0 3 (fontified t) 3 7 (fontified t)) #("    os.mkdir
" 0 12 (fontified t) 12 13 (fontified t)) #("(global-hl-line-mode t)" 0 23 (fontified t)) "
;;; -*- lexical-binding: t -*-"))
(setq search-ring '("ini" "mode: gitignore" "lsp" "b" "proje" "read" "compa" "com" "thee" "coin" "cond"))
(setq regexp-search-ring 'nil)
