#+TITLE: Emacs config
#+AUTHOR: Firaaz

#+OPTION: num:nil
#+PROPERTY: header-args :results silent

* SETUP
** Setup repos
  we are going to be using melpa and elpa
#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil
      package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/"))
      package-archive-priorities
      '(("elpa" . 5) ("melpa" . 10)))
#+END_SRC

** bootstraps
#+NAME: use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(require 'use-package-ensure)
(setq use-package-always-ensure t)
 #+END_SRC

** Prefrences
*** Display
#+NAME: bar-disable
#+BEGIN_SRC emacs-lisp
  ;; (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
  (setq-default display-line-numbers-type 'relative
		display-line-numbers-current-absolute t
		display-line-numbers-width 3
		display-line-numbers-widen t)
#+END_SRC
#+NAME: theme
#+BEGIN_SRC emacs-lisp 
  (use-package doom-themes)
  (use-package all-the-icons)
  (use-package doom-modeline
    :hook
    (after-init . doom-modeline-mode))
#+END_SRC

*** Misc
#+NAME: y-or-no-p
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

#+NAME: saves-location
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.saves"))
	backup-by-copying t
	delete-old-versions t
	kept-new-versions 10
	kept-old-versions 10
	version-control t)
#+END_SRC
#+NAME: gc
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 10000000)

  (add-hook 'after-init-hook
	    (lambda ()
	      (setq gc-cons-threshold 10000000)
	      (message "gc-cons-threshold restored to %S"
		       gc-cons-threshold)))
#+END_SRC
#+NAME: startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
	initial-buffer-choice nil)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;; (setq-default indent-tabs-mode nil)
  (setq tab-width 4)
  (prefer-coding-system 'utf-8)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
#+END_SRC
* PACKAGES
** which-key
   #+NAME: which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config (which-key-mode))
   #+END_SRC
** evil-mode
#+NAME: evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-goggles
    :after evil
    :config (progn
              (evil-goggles-mode)
              (evil-goggles-use-diff-faces)))

  (use-package evil-magit
    :after evil :config (require 'evil-magit))

  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :config
    (evil-commentary-mode))

  (use-package evil-snipe
    :config
    (evil-snipe-mode +1))
#+END_SRC
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

  (use-package flycheck-pos-tip
    :after flycheck
    :config (flycheck-pos-tip-mode))
#+end_src

** magit
#+NAME: magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
 #+END_SRC
** helm

#+NAME: helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    (setq helm-follow-mode-persistent t
          helm-autoresize-max-height 40
          helm-display-header-line nil
          helm-display-header-line nil))
;
;    :config
;    (require 'helm-config)
;    (helm-autoresize-mode t)
;    (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
;    (helm-mode t)
;    (helm-flx-mode 1)
;    (helm-fuzzier-mode 1))
;
;  (use-package smex)
;  (use-package helm-swoop)
;  (use-package helm-flx)
;  (use-package helm-fuzzier)
;  (use-package helm-smex)
;  (use-package dash)
#+END_SRC

** ivy/counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (ivy-mode 1))
  (use-package ivy
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d "))
#+END_SRC
** projectile
   #+NAME: projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :config
       (projectile-mode t)
       (helm-projectile-on))
     #+END_SRC
** company
#+NAME:Company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-require-match 'never
          company-minimum-prefix-lenght 2
          company-tooltip-align-annotations t
          company-idle-delay 0.5
          company-tooltip-limit 20
          global-company-mode t))
#+END_SRC
** lsp
#+NAME: lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
	:hook
	((python-mode . lsp)
	 (c-mode . lsp)
	 (java-mode . lsp)
	 (sh-mode . lsp)
	 (scala-mode . lsp))

	:config
	(setq lsp-prefer-flymake nil
		  lsp-enable-snippet t
		  lsp-auto-execute-action t
		  lsp-eldoc-render-all t
		  lsp-enable-completion-at-point t
		  lsp-enable-xref t
		  lsp-enable-indentation t))

  (use-package lsp-ui
	:after lsp-mode
	:hook
	(lsp-mode . lsp-ui-mode))

  (use-package company-lsp
	:after '(company lsp-mode)
	:config
	(setq company-lsp-cache-candidates t
		  company-lsp-async t
		  company-lsp-enable-snippet t)
	(push 'company-lsp company-backends))

#+END_SRC
** yasnippet
#+NAME: yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode))

  (defun company-mode-with-yas (backend)
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
  (use-package yasnippet-snippets
    :after '(yasnippet company)
    :config
    (yasnippet-snippets-initialize)
    (setq company-backends (mapchar #'company-mode-with-yas company-backends)))
  
#+END_SRC
** spotify
#+BEGIN_SRC emacs-lisp
  (use-package helm-spotify-plus)
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs)

  (use-package treemacs-evil
    :after '(treemacs evil))
  (use-package treemacs-projectile
    :after '(treemacs projectile))
  (use-package treemacs-magit
    :after '(treemacs magit))
#+END_SRC
** visual stuff
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config (beacon-mode 1))

  (use-package rainbow-delimiters
    :init
    (progn
      (add-hook 'prog-mode-hook (lambda() (rainbow-delimiters-mode t)))
      (add-hook 'org-mode-hook (lambda() (rainbow-delimiters-mode t)))))

  (use-package smartparens
    :init
    (progn
      (add-hook 'prog-mode-hook (lambda() (smartparens-mode t)))
      (add-hook 'lisp-mode-hook (lambda() (smartparens-strict-mode t))))
    :config
    (require 'smartparens-config))
#+END_SRC
** aggresive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :init
    (add-hook 'prog-mode (lambda() (aggressive-indent-mode))))
#+END_SRC
** pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
	:config
	(pdf-tools-install))

  (use-package org-pdfview)
#+END_SRC
** org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org)
  (use-package evil-org)
  (use-package org-bullets
	:config
	(org-bullets-mode))
#+END_SRC
** language specifics
*** python
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :hook
    (python-mode . (lambda()
      (require 'lsp-python-ms)
      (lsp))))
#+END_SRC
*** java
#+begin_src emacs-lisp 
  (use-package lsp-java)
#+end_src
*** javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+end_src
*** web-mode
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode)))
#+end_src
*** rust
#+begin_src emacs-lisp
  (use-package rustic)
#+end_src
*** scala
#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode))
#+END_SRC
* KEYBINDINGS
#+NAME: keybindings
#+BEGIN_SRC emacs-lisp
  (use-package general)

  (general-create-definer my-leader-def
    :prefix "SPC")

  (general-create-definer my-local-leader-def
    :prefix "SPC m")

  (general-define-key
      "C-x C-f" 'ido-find-file
      "C-x g" 'magit-status
      "M-p" 'projectile-command-map
      "C-," 'evil-commentary-line)


  (general-define-key
   :states '(motion normal)
   "s" 'evil-snipe-s
   "S" 'evil-snipe-S)

  (my-leader-def
    :keymaps 'normal
    "o s" 'helm-spotify-plus
    "o m" 'counsel-rhythmbox
    "t i" 'aggressive-indent-mode
    "t a" 'company-mode
    "g" 'magit-status)
#+END_SRC
