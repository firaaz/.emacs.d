;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(minibuffer-history buffer-name-history ivy-history counsel-M-x-history extended-command-history file-name-history))
(setq minibuffer-history '("/bin/zsh"))
(setq ivy-history '(#("readme md" 0 9 (ivy-index 0)) #("cui" 0 3 (ivy-index 0)) #("core" 0 4 (ivy-index 0)) #("noo" 0 3 (ivy-index 0)) #("dra" 0 3 (ivy-index 0)) #("clojure-mode" 0 12 (ivy-index 0)) #("fmanage.py" 0 10 (ivy-index 0)) #("fmanage/" 0 8 (ivy-index 0)) #("fma" 0 3 (ivy-index 0)) #("doom-" 0 5 (ivy-index 1))))
(setq counsel-M-x-history '(#("^load" 0 5 (ivy-index 1)) #("shell" 0 5 (ivy-index 22)) #("term" 0 4 (ivy-index 0)) #("^load theme" 0 11 (ivy-index 0)) #("^try" 0 4 (ivy-index 0)) #("^package-re" 0 11 (ivy-index 1)) #("try " 0 4 (ivy-index 3)) #("customize-t" 0 11 (ivy-index 0)) #("^" 0 1 (ivy-index 0)) #("customize-theme" 0 15 (ivy-index 0))))
(setq extended-command-history '("rename-file"))
(setq file-name-history '(#("/home/firaaz/.emacs.d/" 0 22 (ivy-index 0)) #("/home/firaaz/.emacs.d/.gitignore" 0 32 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/smartparens.el" 0 43 (ivy-index 13)) #("/home/firaaz/.emacs.d/config/" 0 29 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/base.el" 0 36 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/latex.el" 0 37 (ivy-index 0)) #("/home/firaaz/projects/idoctor/flaskapp/app/frontend/data/en_Labels.js" 0 69 (ivy-index 0)) #("/home/firaaz/projects/idoctor/flaskapp/app/frontend/data/umls.js" 0 64 (ivy-index 0)) #("/home/firaaz/projects/idoctor/generateLabels.py" 0 47 (ivy-index 0)) #("/home/firaaz/projects/idoctor/data/" 0 35 (ivy-index 4)) #("/home/firaaz/projects/idoctor/" 0 30 (ivy-index 0)) #("/home/firaaz/Downloads/umls-2019AB-full/2019AB-full/README.txt" 0 62 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/haskell.el" 0 39 (ivy-index 0)) #("/home/firaaz/projects/codewars/python/alphabet_position.py" 0 58 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/completion.el" 0 42 (ivy-index 0)) #("/home/firaaz/.doom.d/config.el" 0 30 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/theme.el" 0 37 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/keybinds.el" 0 40 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/clojure.el" 0 39 (ivy-index 0)) #("/home/firaaz/projects/clojure/clj-boost-demo/src/clj_boost_demo/core.clj" 0 72 (ivy-index 0)) #("/home/firaaz/projects/fmanage/fmanage.py" 0 40 (ivy-index 1)) #("/home/firaaz/.emacs.d/config/dired.el" 0 37 (ivy-index 0)) #("/home/firaaz/projects/clojure/clojure-noob/src/clojure_noob/core.clj" 0 68 (ivy-index 0)) #("/home/firaaz/projects/fmanage/clojure.el" 0 40 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/python.el" 0 38 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/projectile.el" 0 42 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/ivy.el" 0 35 (ivy-index 0)) #("/home/firaaz/.emacs.d/custom-variables.el" 0 41 (ivy-index 0)) #("/home/firaaz/.emacs.d/init.el" 0 29 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/lsp.el" 0 35 (ivy-index 0)) #("/home/firaaz/.emacs.d/config/version-control.el" 0 47 (ivy-index 0)) "~/.emacs.d/config/ivy.el" "~/.emacs.d/config/ivy.ek"))
(setq kill-ring '(#("(use-package try)" 0 1 (fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-constant-face fontified t) 16 17 (fontified t)) #("  :after (company auctex))
" 0 2 (fontified t) 2 8 (face font-lock-builtin-face fontified t) 8 26 (fontified t) 26 27 (fontified t)) #(";;; -*- lexical-binding: t -*-" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 30 (face font-lock-comment-face fontified t)) #(";;; -*- lexical-binding: t -*-" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 30 (fontified t face font-lock-comment-face)) #("
" 0 1 (fontified t)) #("(use-package )" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 14 (fontified t)) #("
" 0 1 (fontified t)) #("; enable all commands" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 21 (fontified t face font-lock-comment-face)) #("(global-set-key (kbd \"C-x o\") 'ace-window)" 0 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 42 (fontified t)) #("(reduce (fn [new-map key val]]
        ))" 0 8 (fontified t) 8 9 (fontified t) 9 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 28 (fontified t) 28 29 (fontified t) 29 31 (fontified t) 31 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t)) #("
" 0 1 (fontified t)) #("((()" 0 4 (fontified t)) #(";;; -*- lexical-binding: t -*-" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 30 (face font-lock-comment-face fontified t)) #("(defn -main
  []
  (let [split-set (->> iris-path
                       generate-iris" 0 1 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 1 2 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 2 3 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 3 4 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 4 5 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 5 6 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 6 7 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 7 8 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 8 9 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 9 10 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 10 11 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 11 12 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 12 17 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 17 20 (fontified t cider-locals ("result" "model" "test" "train" "split-set")) 20 21 (face font-lock-keyword-face fontified t cider-locals ("result" "model" "test" "train" "split-set")) 21 22 (face font-lock-keyword-face fontified t cider-locals ("result" "model" "test" "train" "split-set")) 22 23 (face font-lock-keyword-face fontified t cider-locals ("result" "model" "test" "train" "split-set")) 23 25 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 25 26 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 26 27 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 27 28 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 28 29 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 29 30 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 30 31 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 31 32 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 32 33 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 33 36 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 36 37 (face font-lock-keyword-face fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 37 38 (face font-lock-keyword-face fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 38 39 (face font-lock-keyword-face fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 39 40 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 40 48 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 48 50 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 50 73 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 73 85 (fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 85 86 (rear-nonsticky t fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set"))) #("(defn -main
  []
  (let [split-set (->> iris-path
                       generate-iris" 0 1 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set")) 1 2 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-keyword-face) 2 3 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-keyword-face) 3 4 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-keyword-face) 4 5 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-keyword-face) 5 6 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set")) 6 7 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-function-name-face) 7 8 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-function-name-face) 8 9 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-function-name-face) 9 10 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-function-name-face) 10 11 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-function-name-face) 11 12 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set")) 12 17 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set")) 17 20 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set")) 20 21 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-keyword-face) 21 22 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-keyword-face) 22 23 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set") face font-lock-keyword-face) 23 25 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 25 26 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 26 27 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 27 28 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 28 29 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 29 30 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 30 31 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 31 32 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 32 33 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 33 36 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 36 37 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set") face font-lock-keyword-face) 37 38 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set") face font-lock-keyword-face) 38 39 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set") face font-lock-keyword-face) 39 40 (help-echo cider--help-echo fontified t cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 40 48 (fontified t help-echo cider--help-echo cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 48 50 (fontified t help-echo cider--help-echo cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 50 73 (fontified t help-echo cider--help-echo cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 73 85 (fontified t help-echo cider--help-echo cider-locals ("result" "model" "test" "train" "split-set" "split-set")) 85 86 (fontified t help-echo cider--help-echo cider-locals ("result" "model" "test" "train" "split-set" "split-set") font-lock-multiline t)) #(";; (defn demo-reader []
;;   (with-open [reader (io/reader iris-path)]
;;     (doall (csv/read-csv reader))))" 0 3 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-comment-delimiter-face) 3 24 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-comment-face) 24 29 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-comment-delimiter-face) 29 39 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-comment-face) 39 71 (fontified t help-echo cider--help-echo cider-locals ("reader") face font-lock-comment-face) 71 78 (fontified t help-echo cider--help-echo cider-locals ("reader") face font-lock-comment-delimiter-face) 78 84 (fontified t help-echo cider--help-echo cider-locals ("reader") face font-lock-comment-face) 84 107 (fontified t help-echo cider--help-echo cider-locals ("reader") face font-lock-comment-face) 107 109 (fontified t help-echo cider--help-echo cider-locals ("reader") face font-lock-comment-face)) #("lkajsdlksjadlkja" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t font-lock-multiline t)) #(";;; -*- lexical-binding: t -*-" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 30 (face font-lock-comment-face fontified t)) #("
" 0 1 (fontified t)) #("if __name__ == '__main__':" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 11 (fontified t face font-lock-builtin-face) 11 15 (fontified t) 15 16 (fontified t syntax-table (15) face font-lock-string-face) 16 24 (fontified t face font-lock-string-face) 24 25 (fontified t syntax-table (15) face font-lock-string-face) 25 26 (fontified t rear-nonsticky t)) #("if __name__ == '__main__':" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 11 (fontified t face font-lock-builtin-face) 11 15 (fontified t) 15 16 (syntax-table (15) fontified t face font-lock-string-face) 16 24 (fontified t face font-lock-string-face) 24 25 (syntax-table (15) fontified t face font-lock-string-face) 25 26 (fontified t)) "C-x C-o runs the command delete-blank-lines (found in global-map)," #(";;; -*- lexical-binding: t -*-" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 30 (face font-lock-comment-face fontified t)) #("window))" 0 8 (fontified t)) #("t -*-
" 0 6 (face font-lock-comment-face fontified t)) #("main()

" 0 7 (fontified t) 7 8 (fontified t)) #("os.mkdir()" 0 3 (fontified t) 3 10 (fontified t)) #("os.path" 0 3 (fontified t) 3 7 (fontified t)) #("    os.mkdir
" 0 12 (fontified t) 12 13 (fontified t)) #("(global-hl-line-mode t)" 0 23 (fontified t)) "
;;; -*- lexical-binding: t -*-"))
(setq search-ring '("lsp" "b" "proje" "read" "compa" "com" "thee" "coin" "cond"))
(setq regexp-search-ring 'nil)
